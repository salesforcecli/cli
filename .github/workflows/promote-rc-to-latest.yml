name: promote-rc-to-latest

on:
  workflow_dispatch:
  schedule:
    # Wednesdays 1pm central
    - cron: '0 18 * * 3'

jobs:
  promote:
    uses: ./.github/workflows/promote.yml
    secrets: inherit
    with:
      old-channel: latest-rc
      new-channel: latest
      use-ctc: true

  promote-verify:
    runs-on: ubuntu-latest
    needs: [promote]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
          cache: yarn
      - uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        name: verify promote scripts
        with:
          max_attempts: 5
          retry_wait_seconds: 120
          command: ./scripts/verify-promote latest-rc latest
          timeout_minutes: 60
      - name: Install plugin-release-management
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          max_attempts: 5
          retry_wait_seconds: 120
          command: npm install -g @salesforce/plugin-release-management --omit=dev
          timeout_minutes: 60
      # Retry several times because the S3 cache can cause failures
      - name: Version inspect (with retries)
        uses: nick-fields/retry@943e742917ac94714d2f408a0e8320f2d1fcafcd
        with:
          max_attempts: 5
          retry_wait_seconds: 120
          command: sf-release cli:versions:inspect -c stable -l archive --cli sf
          timeout_minutes: 60

  verify-docker-version:
    needs: [promote-verify]
    runs-on: ubuntu-latest
    steps:
      - name: Get latest version
        id: latest-version
        run: |
          VERSION=$(npm view @salesforce/cli@latest --json | jq -r '.version')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Get docker-full CLI version
        id: docker-full-version
        run: |
          docker pull salesforce/cli:latest-full
          VERSION=$(docker run --rm salesforce/cli:latest-full sf version --json | jq -r '.cliVersion' | cut -d'/' -f 3)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Get docker-slim CLI version
        id: docker-slim-version
        run: |
          docker pull salesforce/cli:latest-slim
          VERSION=$(docker run --rm salesforce/cli:latest-slim sf version --json | jq -r '.cliVersion' | cut -d'/' -f 3)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
      - name: Compare Docker versions against npm
        run: |
          echo "NPM latest version is: ${{ steps.latest-version.outputs.version }}"
          echo "Docker-full version is: ${{ steps.docker-full-version.outputs.version }}"
          echo "Docker-slim version is: ${{ steps.docker-slim-version.outputs.version }}"
          if [ "${{ steps.latest-version.outputs.version }}" == "${{ steps.docker-full-version.outputs.version }}" ] && [ "${{ steps.docker-full-version.outputs.version }}" == "${{ steps.docker-slim-version.outputs.version }}" ]; then
            echo "Docker versions match npm version. Proceeding..."
          else
            echo "Version mismatch! Exiting..."
            exit 1
          fi

  announce-promotion-to-slack:
    runs-on: ubuntu-latest
    needs: [promote-verify, verify-docker-version]
    steps:
      - name: Get latest-rc version
        id: latest-rc-version
        run: |
          VERSION=$(npm view @salesforce/cli@latest-rc --json | jq -r '.version')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Announce promotion
        id: slack
        uses: slackapi/slack-github-action@v1.21.0
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.PLATFORM_CLI_CHANNEL_SLACK_INCOMING_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
        with:
          payload: |
            {
              "blocks": [{
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rocket: `sf` version `${{ steps.latest-rc-version.outputs.version }}` has been promoted from `latest-rc` to `latest` :rocket:\nRun `sf whatsnew -v latest` to see what's new"
                }
              }]
            }
